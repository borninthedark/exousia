name: Fedora Sericea Bootc DevSec CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *" # Nightly build at 3 AM UTC

permissions:
  contents: read
  packages: write
  id-token: write
  pull-requests: write
  security-events: write

concurrency:
  group: devsec-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ghcr.io/${{ github.repository_owner }}/exousia

jobs:
  build-scan-push-sign:
    runs-on: ubuntu-24.04
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate image tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_BASE }}
          tags: |
            type=sha,format=long   # ensures sha-<commit>
            type=ref,event=branch  # e.g. main
            type=schedule,pattern=nightly
          labels: |
            org.opencontainers.image.licenses=MIT

      # --- Build ---
      - name: Build image with Buildah
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_BASE }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          containerfiles: ./Containerfile
          build-args: |
            GH_USER=${{ github.actor }}
            GH_TOKEN=${{ secrets.GHCR_PAT }}
          oci: false
          tls-verify: true

      # --- SAST / Linting ---
      - name: Lint Containerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Containerfile
          ignore: DL3041,DL3059,SC2086,DL4006,SC3037

      - name: Setup Bats
        uses: bats-core/bats-action@3.0.0

      - name: Run Bats Tests

      - name: Setup Bats + libraries
        id: setup-bats
        uses: bats-core/bats-action@v3
        with:
          bats-install: true
          support-install: true
          assert-install: true
          file-install: true
          detik-install: true

      - name: Run Bats tests
        env:
          BATS_LIB_PATH: ${{ steps.setup-bats.outputs.lib-path }}
        run: |
          bats -r tests

        continue-on-error: true

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master

      # --- Vulnerability Scanning ---
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-v2

      - name: Save images for Trivy scan
        run: |
          mkdir -p trivy-images
          for TAG in $(echo "${{ steps.meta.outputs.tags }}" | tr ' ' '\n'); do
            echo "Saving $TAG for scan..."
            podman save -o "trivy-images/$(echo $TAG | tr '/:' '__').tar" $TAG
          done

      - name: Install Trivy
        run: |
          curl -sSfL https://github.com/aquasecurity/trivy/releases/download/v0.52.2/trivy_0.52.2_Linux-64bit.tar.gz \
            | tar -xz -C /usr/local/bin trivy

      - name: Trivy scan (non-blocking, all tags)
        continue-on-error: true
        run: |
          for TAR in trivy-images/*.tar; do
            echo "Scanning $TAR..."
            trivy image --input "$TAR" \
              --scanners vuln \
              --severity CRITICAL,HIGH \
              --exit-code 1 \
              --format table || echo "::warning::Trivy found CRITICAL or HIGH vulnerabilities in $TAR"
          done

      - name: Semgrep static analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto

      # --- Push to GHCR ---
      - name: Push image to registry
        if: github.event_name != 'pull_request'
        id: push-to-registry
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ env.IMAGE_BASE }}
          tags: ${{ steps.meta.outputs.tags }}
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # --- Sign with Cosign ---
      - name: Install cosign
        if: github.event_name != 'pull_request'
        run: |
          curl -sSfL https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 \
            -o /usr/local/bin/cosign && chmod +x /usr/local/bin/cosign

      - name: Sign image with cosign (keyless OIDC)
        if: github.event_name != 'pull_request'
        run: |
          cosign sign --yes ${{ env.IMAGE_BASE }}:sha-${{ github.sha }}
