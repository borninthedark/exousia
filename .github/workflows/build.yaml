name: Fedora Sericea Bootc DevSec CI (Unified Workflow)

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
  schedule:
    - cron: "20 4 * * *" # Nightly build at 4:20 AM UTC

permissions:
  contents: read
  packages: write
  id-token: write
  pull-requests: write
  security-events: write

concurrency:
  group: devsec-unified-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ghcr.io/${{ github.repository_owner }}/exousia

jobs:
  build-test-scan-push-sign:
    name: Sericea CI 
    runs-on: ubuntu-24.04
    timeout-minutes: 45

    steps:
      # ======================== BUILD STAGE ========================= #
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate image tags and labels
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_BASE }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,format=long
            type=ref,event=branch
            type=schedule,pattern=nightly
          labels: |
            org.opencontainers.image.licenses=MIT

      - name: Lint Containerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Containerfile
          ignore: DL3041,DL3059,SC2086,DL4006,SC3037

      - name: Create auth.json secret for build
        run: |
          mkdir -p ./bootc-secrets
          AUTH_SECRET=$(echo -n "${{ github.actor }}:${{ secrets.GHCR_PAT }}" | base64 -w 0)
          echo "{\"auths\":{\"ghcr.io\":{\"auth\":\"$AUTH_SECRET\"}}}" > ./bootc-secrets/auth.json

      - name: Build image with Buildah
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_BASE }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          containerfiles: ./Containerfile
          oci: false
          tls-verify: true

      # ======================== TEST STAGE ========================== #
      - name: Setup Bats testing framework
        id: setup-bats
        uses: bats-core/bats-action@3.0.0

      - name: Run Bats tests on the image
        shell: bash
        env:
          BATS_LIB_PATH: ${{ steps.setup-bats.outputs.lib-path }}
          TERM: xterm
        run: |
          # Use the first tag generated as the image to test against
          FIRST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Running tests against image: $FIRST_TAG"
          
          TEST_IMAGE_TAG="$FIRST_TAG" \
          buildah unshare -- bats -r tests

      - name: Run ShellCheck on scripts
        uses: ludeeus/action-shellcheck@master

      # ======================== SCAN STAGE ========================== #
      - name: Cache Trivy database
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-v2

      - name: Install Trivy for vulnerability scanning
        run: |
          curl -sSfL https://github.com/aquasecurity/trivy/releases/download/v0.52.2/trivy_0.52.2_Linux-64bit.tar.gz \
            | tar -xz -C /usr/local/bin trivy

      - name: Trivy vulnerability scan (non-blocking)
        continue-on-error: true
        run: |
          # Use the first tag generated as the image to scan
          FIRST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          
          trivy image "$FIRST_TAG" \
            --scanners vuln \
            --severity CRITICAL,HIGH \
            --exit-code 1 \
            --format table || echo "::warning::Trivy found CRITICAL or HIGH vulnerabilities."

      - name: Semgrep static analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto

      # ======================== PUSH STAGE ========================== #
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Push image to registry
        if: github.event_name != 'pull_request'
        id: push-to-registry
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ env.IMAGE_BASE }}
          tags: ${{ steps.meta.outputs.tags }}
          registry: ${{ env.REGISTRY }}

      # ======================== SIGN STAGE ========================== #
      - name: Install Cosign for image signing
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0

      - name: Sign the container image
        if: github.event_name != 'pull_request'
        run: |
          echo "Signing image by digest: ${{ steps.push-to-registry.outputs.digest }}"
          cosign sign --yes "${{ env.IMAGE_BASE }}@${{ steps.push-to-registry.outputs.digest }}"
        env:
          COSIGN_EXPERIMENTAL: "true"